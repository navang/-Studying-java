DESC EMP;
SELECT
    *
FROM EMP;


--1. 업무별, 부서별 급여 합계와 인원수를 출력하되, 
 --  10번 부서를 제외하고 업무가 ‘SALESMAN’과 ‘MANAGER’만 출력한다.

SELECT  JOB, DEPTNO, count(*) cnt,  sum(sal) sum 
FROM  emp  
WHERE deptno <> '10'
GROUP BY JOB, DEPTNO
HAVING job LIKE 'SALESMAN' OR job LIKE 'MANAGER';
-- 아래처럼 쓸수도 있다. 
SELECT  DEPTNO, JOB, count(*) cnt,  sum(sal) sum 
FROM  emp  
GROUP BY JOB, DEPTNO
HAVING (job LIKE 'SALESMAN' OR job LIKE 'MANAGER') AND deptno <> '10';


--2. 업무별로 평균급여와 최대급여를 출력하되, 평균급여가 2000이상인 것만 출력하고 평균급여가 높은 순으로 정렬

SELECT deptno, count(*) cnt,  max(sal) max ,   round(avg(sal)) avg 
FROM  emp  
GROUP BY deptno 
HAVING AVG(SAL) > 2000
ORDER BY AVG DESC;

-- 3. 5개씩 급여합계와 인원수를 출력 (rownum이용)
SELECT  CEIL(ROWNUM/5) GRP, count(*) cnt, sum(sal) sum  
FROM emp 
GROUP BY CEIL(ROWNUM/5);  -- CEIL 무조건 올림 


--4. 같은 입사년도 별로 인원수를 출력
SELECT TO_CHAR(HIREDATE,'YYYY'), count(*) cnt
FROM emp
GROUP BY TO_CHAR(HIREDATE,'YYYY');


--5. 다음과 같이 출력

   CLERK     SALESMAN MANAGER       (업무명)
-----------------------------------------------------------------------
     4           4       3           (인원수)

SELECT  count(decode( job, 'CLERK',1)) as CLERK,
        count(decode( job, 'SALESMAN',1)) as SALESMAN,
        count(decode( job, 'MANAGER',1)) as MANAGER
FROM  emp  ;

-- case when 
SELECT 
sum(CASE job WHEN 'CLERK' THEN 1 END) as CLERK, 
-- sum/count ( decode (  job 중에서 when 'clerk'일때 1로 쳐서 SUM/COUNT 함) as 그걸 CLERK란 COLUM으로 
sum(CASE job WHEN 'SALESMAN' THEN 1 END) as SALESMAN,
sum(CASE job WHEN 'MANAGER' THEN 1 END) as MANAGER
FROM emp;

/*
6. 다음과 같이 출력

업무명  10번부서 20번부서 30번부서 급여합계
----------------------------------------------------------------------------------------
CLERK  1300  1900     950  4150
SALESMAN 0     0    5600   5600
PRESIDENT 5000     0       0  5000
MANAGER    2450  2975    2850  8275
ANALYST     0  6000       0  6000
*/
SELECT  job "업무",
        sum(decode( DEPTNO, '10',sal,0)) as "10", 
        sum(decode( DEPTNO, '20',sal,0)) as "20",
        sum(decode( DEPTNO, '30',sal,0)) as "30",
        sum(sal) "급여합계"
FROM  emp  
GROUP BY job;

-- case when 
SELECT job "업무명",
sum(CASE deptno WHEN 10 THEN sal else 0 END) as "10번부서",
-- DEPTNO 가 10이면 SAL을 , 없으면 0으로 SUM 해서 "10번 부서"COLNM으로 
sum(CASE deptno WHEN 20 THEN sal else 0 END) as "20번부서",
sum(CASE deptno WHEN 30 THEN sal else 0 END) as "30번부서",
sum(sal) "급여합계"
FROM emp
group by job;


-- 사원테이블(EMP) 에 사원명과 부서테이블 (DEPT) 에 그 사원의 부서명을 출력 
SELECT ename, dname
FROM emp,dept;

SELECT emp.ename, dept.dname , emp.deptno 
FROM emp, dept 
WHERE emp.deptno = dept.deptno;

-- 1)내부조인 
SELECT e.ename ename, d.dname dname , e.deptno deptno -- 별칭을 확실하게 주자 
FROM emp e, dept d 
WHERE e.deptno = d.deptno; -- 위에서 이름을 지정해주었기 때문에 
-- 내부조인 표준안 
select e.ename, d.dname, d.deptno
from emp e INNER JOIN dept d
ON e.deptno = d.deptno;

-- 2)외부조인 -- dept table에 (+)
SELECT e.ename ename, d.dname dname , e.deptno deptno 
FROM emp e, dept d 
WHERE e.deptno = d.deptno(+)  ; -- 한 테이블에 공통 컬럼이 없는  쪽에 (+) 붙인다 

select e.ename, d.dname, d.deptno
from emp e LEFT OUTER JOIN dept d
ON e.deptno = d.deptno;

-- 2)외부조인  -- emp table에 (+)
SELECT e.ename ename, d.dname dname , e.deptno deptno 
FROM emp e, dept d 
WHERE e.deptno(+) = d.deptno  ; -- 한 테이블에 공통 컬럼이 없는  쪽에 (+) 붙인다 

select e.ename, d.dname, d.deptno
from emp e LEFT OUTER JOIN dept d
ON e.deptno = d.deptno;

-- 3)full outer join
SELECT e.ename ename, d.dname dname , e.deptno deptno 
FROM emp e, dept d 
WHERE e.deptno(+) = d.deptno (+); ------------ 에러 

select e.ename, d.dname, d.deptno
from emp e FULL OUTER JOIN dept d
ON e.deptno = d.deptno;

-- 각 사원의 매니저를 검색
-- 
SELECT e1.empno, e1.ename, e1.mgr , e2.ename
FROM emp e1, emp e2
WHERE e1.mgr=e2.empno(+);
----------------------------------------------- 표준안 변환
SELECT e1.empno, e1.ename, e1.mgr , e2.ename  -- MGR 이 없는 사람들 제외한 결과 
FROM emp e1 INNER JOIN emp e2
ON e1.mgr=e2.empno;

SELECT e1.empno, e1.ename, e1.mgr , e2.ename  -- MGR 아래 있는 NULL값의 사람도 출력 
FROM emp e1 RIGHT OUTER JOIN emp e2
ON e1.mgr = e2.empno;

SELECT e1.empno, e1.ename, e1.mgr , e2.ename  -- MGR을 확장해서 결과 출력 ,
FROM emp e1 LEFT OUTER JOIN emp e2
ON e1.mgr=e2.empno;

SELECT e1.empno, e1.ename, e1.mgr , e2.ename  -- 직원 수와 MGR 모두 확장 
FROM emp e1 FULL OUTER JOIN emp e2
ON e1.mgr=e2.empno;

SELECT *
FROM DEPT;
SELECT *
FROM EMP;

--------------------------------------------------------------------------
--1. EMP 테이블에서 사원번호, 이름, 업무, 부서번호와 DEPT 테이블에서 부서명, 근무지를 출력
SELECT e.empno, e.ename, e.job , e.deptno, d.loc, d.dname -- EMP테이블에 부서명이 없는 직원이있음 
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno;
-- 표준안
SELECT e.empno, e.ename, e.job , e.deptno, d.loc, d.dname -- EMP테이블에 부서명이 없는 직원이있음 
FROM emp e LEFT OUTER JOIN dept d
ON e.deptno = d.deptno;

--2. SALESMAN 사원만 사원번호, 이름, 급여, 부서명, 근무지를 출력
SELECT e.empno, e.deptno, e.ename, e.sal, d.dname , d.loc
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno and E.JOB='SALESMAN';

SELECT e.empno, e.deptno, e.ename, e.sal, d.dname , d.loc
FROM emp e LEFT OUTER JOIN dept d
ON e.deptno = d.deptno 
WHERE E.JOB='SALESMAN';

--3. 보너스(comm)를 받는 사원에 대해 이름, 부서명, 위치를 출력
SELECT e.empno, e.comm, e.ename, d.dname , d.loc
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno and NVL(e.comm,0) <> '0';

SELECT e.empno, e.comm, e.ename, d.dname , d.loc
FROM emp e LEFT OUTER JOIN dept d
ON e.deptno = d.deptno 
WHERE nvl(e.comm,0) <> '0';

--4. 부서별 부서명과 급여 합계를 출력
SELECT  e.deptno, d.dname, sum(e.sal) sum
FROM emp e, dept d
WHERE e.deptno(+) = d.deptno 
GROUP BY e.deptno , d.dname;

SELECT  e.deptno, d.dname, sum(e.sal) sum
FROM emp e FULL OUTER JOIN dept d 
ON e.deptno = d.deptno 
GROUP BY e.deptno , d.dname;
--------------------------------------
SELECT AVG(SAL)FROM EMP;
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL < (SELECT AVG(SAL) FROM EMP);

-- 평균급여보다 높고 최대 급여보다 낮은 월급을 받는 사원명단 조회 
SELECT AVG(SAL) FROM EMP;
SELECT MAX(SAL) FROM EMP;

-- 서브쿼리를 이용함  
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL > (SELECT AVG(SAL) FROM EMP)
      AND SAL < (SELECT MAX(SAL) FROM EMP);
 -- 서브쿼리+ 조인을 이용함      
SELECT empno, ename, sal 
FROM emp e1,
    ( SELECT AVG(SAL) avg ,  MAX(SAL)max FROM EMP )e2
    WHERE e1.sal > e2.avg and e1.sal < e2.max;
    
  -------------------------------------------------
  --월급순으로 상휘 10명의 명단을 출력 (ROWNUM) 
  SELECT EMPNO, ENAME, SAL
  FROM EMP
  ORDER BY NVL(SAL,0) DESC;
  ---- 정렬한뒤 10개 단위로 자른것
  SELECT *
  FROM( 
  SELECT EMPNO, ENAME, SAL
  FROM EMP
  ORDER BY NVL(SAL,0) DESC
  )
  WHERE ROWNUM <=10;
  
  --- 10개를 가져와서 정렬한것
  SELECT EMPNO, ENAME, SAL
  FROM EMP
  WHERE ROWNUM <= 10
  ORDER BY NVL(SAL,0) DESC;
  
  
-----------------------------------------------------


    UNION           합집합 
    UNION    ALL    합집합 + 중복 2번 출력 
    INTERSECT       교집합
    MINUS           차집합
    
    -- 업무가 CLERK 인 사원의 사번, 사원명, 업무, 부서번호
     SELECT empno, ename, job, deptno FROM emp WHERE job ='CLERK'
     ----( SMITH, ADAMS , JAMES, MILLER)
    
    -- 10 번 부서의 사번, 사원명, 업무, 부서번호 
    UNION --( UNION, UNION ALL, INTERSECT, MINUS)  -- 두개의 셀렉 문장을 집합처리하는경우 
    SELECT empno, ename, job, deptno FROM emp WHERE DEPTNO = 10;
    ---- ( CLERK, KING , MILLER) 

------------------------------------------------

--<< 연습문제 >> 서브쿼리

select * from emp;
select * from dept;

--1. (SCOTT의 급여)보다 많은 사원의 정보를 사원번호, 이름, 담당업무, 급여를 출력
 
  SELECT e1.EMPNO, e1.ENAME, d.dname, e1.sal , e2.sal AS "SCOTT_SAL"
  FROM EMP e1,
  ( SELECT SAL FROM EMP WHERE ENAME= 'SCOTT')e2,
   dept d
   WHERE e1.deptno =d.deptno AND e1.sal> e2.sal;

--2. (30번 부서의 최소 급여)보다 각부서의 최소 급여가 높은 부서를 출력
  /*  SELECT  min(e1.sal), d.dname 
    FROM EMP E1 ,
    (select min(sal) from emp where deptno= '30' )e2,
    dept d
    WHERE e1.deptno = d.deptno and e1.deptno= e2.deptno 
    GROUP BY E1.SAL, d.dname ;
    */
    
    SELECT  deptno, min(sal) min
    FROM EMP 
    GROUP BY  deptno
    HAVING MIN(SAL) > (select min(sal) from emp where deptno= 30);
    
--3. 업무별로 평균 급여 중에서 가장 적은 급여를 가진 직업을 출력

select min(sal), d.dname  
from emp , dept d
where deptno = d.deptno
Group by sal, d.dname
having min(sal) < (select round(avg(sal)) from emp group by deptno);

select round(avg(sal))  -- 부서별 평균 급여
from emp 
group by deptno;

select   min(sal) ,d.dname -- 부서별 최소급여 
from emp e INNER JOIN dept d
ON e.deptno =d.deptno
group by d.dname ;


4. 사원번호가 7521의 업무와 같고 사번 7934인 직원보다 급여를 많이 받는 사원의 정보를 출력


5. 업무가 ‘MANAGER’인 사원의 정보를 이름, 업무, 부서명, 근무지를 출력


6. 'WARD'와 부서와 업무가 같은 사원 명단 출력



=========================================================================



[ MERGE 샘플 예제 ]





MERGE INTO student s

USING (SELECT '1111' no, '김태희' name, '여자' gender, '서울시' addr, '900000-2111111' jumin, 20 deptno from dual) d

ON (s.no = d.no)

WHEN MATCHED THEN

UPDATE

SET s.name = d.name, s.gender = d.gender, s.addr = d.addr, s.jumin = d.jumin, s.deptno = d.deptno

WHERE s.no = d.no

WHEN NOT MATCHED THEN

INSERT VALUES(d.no, d.name, d.gender, d.addr, d.jumin, d.deptno);



--